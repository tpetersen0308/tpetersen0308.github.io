---
layout: post
title:      "Sinatra Portfolio Project - Bird Logger"
date:       2018-01-30 20:51:02 +0000
permalink:  sinatra_portfolio_project_-_bird_logger
---


I have to say, I felt pretty confident going into this project. Knowing the requirements were all things I'd had a lot of chances to practice in the Sinatra section of Learn Verified, everything I'd have to do to build my web app started taking shape in my head the moment I had an idea to work with. The main challenge was to take all of these things I'd been learning, like CRUD actions, RESTful routes, ActiveRecord and input validation, and implement them in a single app, but I felt pretty well prepared and was ready to get started.

After a bird information scraper proved a little too involved to satisfy the constraints of my CLI project, I still wanted to do something related to birds, and a bird-logging app immediately fit the requirements for this project pretty well, while also allowing me to implement some slightly more complex object relationships than the requirements demanded. I envisioned an app where users can post bird sightings, so a sighting would belong to a user, but a sighting and a bird felt like distinct objects as well, so I also created a bird class that would have a many-to-many relationship with users through sightings, which also each belong to a bird.

Getting the basic functionality of the app up and running went pretty smoothly. I built application controllers to control the respective CRUD actions for users, sightings, and birds--actually, when I say I built them, I actually mean I used [corneal](https://github.com/thebrianemory/corneal) to stub out my models, controllers, and migrations and build an ActiveRecord/Sinatra-friendly directory to store it all in, which made my life infinitely easier. Sightings got all of the standard index, show, edit, and create pages. I didn't include edit or delete actions for users or birds, because accounting for the consequences for sightings of deleting/editing the users and/or birds they belong to extended further beyond the constraints of this project than felt prudent for me to venture. 

Once I got all of my CRUD actions functioning properly, I went about refining my pages. I wanted to make sure that it was easy to navigate around the site without needing to know exactly what url to enter, so I made html elements like bird and user names into links to their show pages, included links to index pages where appropriate, and had a logout link conditionally display in the layout page if the user was logged in. I also included flash messages to accompany any redirect that resulted from a forbidden action--such as viewing content without logging in, or trying to modify another user's content--as well as to greet users upon logging in and out, so that users will understand if they end up at a page they didn't intend to navigate to.

I think what I'm most pleased with about this app is that it constitutes a [much simplified] bird-logging app with basic functionality that I, as a birder, would like to have available in such an app. One can view all sightings that have been posted, click on a bird's name to see it's show page which provides useful information like where it's been spotted, how many times, and by whom, or add and edit sightings, optionally including personal notes, and easily view all of their sightings through their own user show page and compare them to the sightings listed on others' profiles. There are still many features missing from this that a true birding app would need, such as search options, image uploading, song/call sampling, etc., but this project still really reinforced my confidence in my ability as a developer to see an idea through from its conception to a web app that, while maybe not ready for deployment, at least draws on all of the skills I have learned so far. [Click here](https://github.com/tpetersen0308/bird-logger) to check out the GitHub repo, and happy coding!
