---
layout: post
title:      "CLI Gem - JPL Missions"
date:       2017-11-26 23:26:03 +0000
permalink:  cli_gem_-_jpl_missions
---


By the time I reached my CLI data gem project, I felt pretty well prepared to write an application that would satisfy the requirements. Between the scraper labs and writing a CLI tic-tac-toe program, I had a decent grasp of how to effectively scrape data from a website, and how to write a CLI class that would allow a user to easily navigate the program. Utlimately, writing the program itself wasn't too painful. However, I can't say the same for getting started, constraining features, and publishing the gem. 

Initially, I thought I'd scrape the [Audobon Society Bird Guide](http://www.audubon.org/bird-guide) for information on North American birds that a user could browse, perhaps by a few different filtering options like region or family. The site itself is reasonably scrape-able, but I underestimated how many birds would be included in any given category. In this kind of program, a user would end up getting massive lists of birds to sort through, even given fairly narrow filtering options. I decided it wouldn't be the best candidate for a menu-driven program. Next, I went to another favorite topic of mine: space. The [NASA](https://www.nasa.gov/) website itself faced an issue similar to my birds idea, in addition to being somewhat less scrape-able. I live in Pasadena, CA, near the [NASA Jet Propulsion Laboratory](https://www.jpl.nasa.gov/) though, where they conduct a lot of NASA's coolest missions out of, and their website is where I finally found a manageable amount of data on a scrape-able website. 

Setting up my program and publishing it to [rubygems.org](http://www.rubygems.org) were easily the most difficult parts of this project for me. After becoming fairly dependent on the Learn IDE's commands, I sorely needed a git refresher. I also had to stumble through enabling executable permissions and setting up a directory and environment, but [Bundler](http://bundler.io/) helped make that last part a lot easier. 

Now that I had a viable idea and a project set up, it was on to the [relatively] easy part! I decided to follow [Avi's advice](https://www.youtube.com/watch?v=_lDExWIhYKI) and start from the top--starting with the executable file as though the program already functions as I need it to, and then adding functionality until I was getting to real data scraped from the web. This was counter-intuitive for me. Left to my own devices, I probably would've started by building my scraper class and working my way up to the CLI, but I'm glad I did it from the top down now that it's done. I think it guided my program such that I only wrote what was really necessary to make the program work as dictated by what was missing each step of the way, instead of trying to predict exactly what methods and classes I would need before I even started. Before long, I had a working CLI program that allowed a user to browse NASA JPL's current, past, future, and proposed missions and learn more about any missions that piqued their interest. 

At this point, I hadn't spent that much time on the project in total, and I [incorrectly] thought I was basically finished, so I decided to try to add some features. Three hours later, I was buried in a mess of profligate menus and url-string concatenation methods that worked about 90% of the time, with no real way to get the other 10% to work, which is when I realized I was pushing the limits of this website's scrape-ability. I decided it was a good effort, but that the extra features were ultimately not realistic, and it was time to publish my gem and call it a night. As if. 

Publishing my gem to [rubygems.org](http://www.rubygems.org) was easily the most difficult part of this project. Actually, make that second-most. The hardest part was getting it to execute by simply running the gem title as a command in the console, but I'll get to that next. Ultimately, it came down to getting my environment set up properly, and really getting into the nitty-gritty of my .gemspec file, but after a lot of googling and studying the how-to's on the rubygems site, I finally had jpl_missions published. Now the problem was that my readme instructed users to simply install the gem and run a "jpl_missions" command to use it, which was now throwing an unitialized constant error. 

At this point, users could download the gem and run it by requiring it in IRB, creating a new instance of the CLI class, and calling its #call method. This technically satisfied the project requirements as I understood them, but I felt *so close* to getting this thing to work the way the readme promised, so I kept at it... up to the point that I was ready to break my laptop in half and was coming up on enough sleep deprivation that I was at risk of passing out at my girlfriend's family's Thanksgiving dinner the next day. I knew it has something to do with the way I was setting up my .gemspec, but I was driving myself crazy trying the same fixes over and over again and getting nowhere. After a few days of family gatherings and events over the holiday weekend, I returned to it and figured it out without too much more pain--a reminder that it's important to know when walk away for a bit and trust [the shower principle](https://en.wikipedia.org/wiki/The_Shower_Principle). A little more googling finally revealed that I needed to tell spec.bindir in my gemspec where my executable files were. So simple. I published a new version of the gem and had everything working as intended. And now I get to celebrate with some Thanksgiving leftovers!
