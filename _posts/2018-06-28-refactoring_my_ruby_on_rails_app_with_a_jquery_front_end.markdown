---
layout: post
title:      "Refactoring my Ruby on Rails App with a jQuery Front End"
date:       2018-06-28 20:11:49 +0000
permalink:  refactoring_my_ruby_on_rails_app_with_a_jquery_front_end
---


I must say, going into this project, I did not feel nearly as confident in my understanding of JavaScript/jQuery as I felt about the knowledge of Ruby on Rails that I leveraged in the first iteration of this prototype web app designed to help people and boarding services verify the status of a given pet's vaccinations and other health concerns. While designing the back end proceeded without much of a struggle, refactoring the front end to have AJAX functionality was a little more like building a house with a cursory understanding of construction principles and knowledge of tools that extends about as far as knowing where the nearest hardware store is and that there are tools there that people putatively use to build houses. Luckily enough for me, but maybe just because I'm a bit of a masochist, I designed the original RoR app with complex enough object associations, validations, and forms that there was more than enough opportunity for practice. 

I think the biggest thing that tripped me up in the beggining of this project was remembering to always consider what kind of data the server was responding to AJAX requests with. I would place a debugger in my .success() or .done() function that would never be triggered because my controller action was still responding with a redirect instead of a render. This resulted in hours spent trying to fix my JavaScript when all I had to do was change one line of code in my controller action. I only had to make that mistake once to learn from it, and the pace really picked up once I did. This lesson also informed my efforts to include validation in the forms I wanted to submit with AJAX, which included health screening updates, new pet registration, updating pet information, and a pet search form. 

Another stumbling block I hit was where I wanted to be able to load, filter, hide, and reload a list of resources all with AJAX requests. I started with a pet's health screenings, and getting them loaded went smoothly enough. I struggled with hiding them for a bit, but ultimately figured out that I was simply attaching the event listener to the "hide" link outside of the scope of the function that was appending the link to the DOM in the first place. The hardest part was getting the "view" link that replaces the "hide" link to reload the list. Click-click-click, nothing. This wound up being another matter of attaching the event listener in the correct scope by calling the function to view screenings in the proper scope within the function that hides screenings, which itself would have to call the function to view screenings likewise, in order to display the proper links with the proper event listeners attached. This was only complicated by my addition of options to filter the list of screenings by status, but by the time I got it all working, applying the same functionality to lists of a user's pets (this time filtered by species) was a piece of cake. 

Getting the whole app functioning the way I wanted involved a lot more mucking about in things like figuring out what data attributes to assign to html elements, and how to store things like session info in hidden fields so I could maintain certain user authorizations in my javascripts, but other than a couple of really difficult problems, the whole project followed a bumpy but more or less consistently upwards trajectory towards completion. By the end of it, and to keep with my original analogy, the whole exercise not only made me feel infinitely more confident in my ability to build a house, but also reminded me that as long as I know where the hardware store is, I have the skills I need to get over there and figure out what tools I need and how to use them to acheive the results I'm after.

Feel free to check out the [GitHub repo](https://github.com/tpetersen0308/my-pet-health_app/tree/jquery-frontend) or watch a [demo video](https://youtu.be/4VOQ4Ne5BCA) for the app prototype if you're interested.
